#version 450

struct Vertex {
    vec3 position;
    vec2 uv;
    float depth;
};

layout(std430, set = 0, binding = 0) buffer VertOut {
    Vertex[] vertices;
};
layout(std430, set = 0, binding = 1) buffer IndexOut {
    uint[] indices;
};

layout(set = 1, binding = 0) uniform texture2D ir_pixels;
layout(set = 1, binding = 1) uniform sampler ir_sampler;

layout(set = 2, binding = 0, RGBA32F) uniform restrict writeonly image2D normal_texture;

layout(set = 3, binding = 0)
#include "uniform.glsl"

#define ir sampler2D(ir_pixels, ir_sampler)
#define tex_size textureSize(ir, 0)

float depth(int x, int y) {
    return 1. - texelFetch(ir, ivec2(x, tex_size.y - 1 - y), 0).r;
}

vec3 pos(int x, int y) {
    vec4 pos = vec4(
        1. - 2. * x / (tex_size.x - 1),
        2. * y / (tex_size.y - 1) - 1.,
        depth(x, y),
        1.);
    vec4 proj = u.ir_proj * pos;
    return vec3(proj.xy, -proj.z) / proj.w;
}

vec3 norm(vec3 z, vec3 a, vec3 b) {
    return cross(a - z, b - z);
}

void main() {
    int x = int(gl_GlobalInvocationID.x);
    int y = int(gl_GlobalInvocationID.y);
    vec3 z = pos(x    , y    );
    vec3 a = pos(x    , y - 1);
    vec3 b = pos(x + 1, y - 1);
    vec3 c = pos(x + 1, y    );
    vec3 d = pos(x    , y + 1);
    vec3 e = pos(x - 1, y + 1);
    vec3 f = pos(x - 1, y    );

    vec3 sum_norm = norm(z, a, b) + norm(z, b, c) + norm(z, c, d) + norm(z, d, e) + norm(z, e, f) + norm(z, f, a);
    
    uint id = y * tex_size.x + x;
    vec3 normal = normalize(sum_norm);
    vec2 uv = vec2(float(x) / (tex_size.x - 1), float(y) / (tex_size.y - 1));
    vertices[id] = Vertex(z, uv, depth(x, y));
    imageStore(normal_texture, ivec2(x, y), vec4(normal, 1.0));

    if (x < tex_size.x - 1 && y < tex_size.y - 1) {
        // since we skip the last row and column, we remove uy to not leave a gap.
        uint base_id = (id - y) * 6;
        indices[base_id    ] = id;
        indices[base_id + 1] = id + 1;
        indices[base_id + 2] = id + tex_size.x;
        indices[base_id + 3] = id + tex_size.x;
        indices[base_id + 4] = id + 1;
        indices[base_id + 5] = id + tex_size.x + 1;
    }

}